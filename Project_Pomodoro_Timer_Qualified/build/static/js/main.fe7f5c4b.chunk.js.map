{"version":3,"sources":["utils/duration/index.js","pomodoro/Subtitle.js","pomodoro/BarPercentage.js","pomodoro/sessionTitle.js","pomodoro/Pomodoro.js","utils/class-names/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","secondsToDuration","givenSeconds","seconds","round","Subtitle","session","className","data-testid","timeRemaining","BarPercentage","barPercentage","focusDuration","breakDuration","label","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","SessionTitle","nextTick","prevState","max","Pomodoro","classNameToBoolean","useState","isTimerRunning","setIsTimerRunning","setSession","setFocusDuration","setBreakDuration","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","type","onClick","duration","disabled","disable","aria-label","title","nextState","prevStateSession","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe7f5c4b.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\r\n\r\nfunction Subtitle({session, secondsToDuration}){\r\n    return (\r\n        <p className=\"lead\" data-testid=\"session-sub-title\">\r\n            {secondsToDuration(session?.timeRemaining)} remaining\r\n        </p>\r\n    )\r\n}\r\n\r\nexport default Subtitle;","import React from \"react\";\r\n\r\nfunction BarPercentage({session, focusDuration, breakDuration}) {\r\n    let barPercentage; \r\n    if(session.label === \"Focusing\"){\r\n        barPercentage =100-((session.timeRemaining / (focusDuration * 60)) * 100);\r\n    } else {\r\n        barPercentage =100-((session.timeRemaining / (breakDuration * 60)) * 100);\r\n    }\r\n\r\n    return (\r\n        <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          <div className=\"progress\" style={{ height: \"20px\" }}>\r\n            <div\r\n              className=\"progress-bar\"\r\n              role=\"progressbar\"\r\n              aria-valuemin=\"0\"\r\n              aria-valuemax=\"100\"\r\n              aria-valuenow={barPercentage} // TODO: Increase aria-valuenow as elapsed time increases\r\n              style={{ width: `${barPercentage}%` }} // TODO: Increase width % as elapsed time increases\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default BarPercentage;","import React from \"react\";\r\nimport {secondsToDuration, minutesToDuration} from \"../utils/duration\"\r\nimport Subtitle from \"./Subtitle\";\r\nimport BarPercentage from \"./BarPercentage\";\r\n\r\nfunction SessionTitle({session, focusDuration, breakDuration}){\r\n    if(!session) return null;\r\n    \r\n    return (\r\n        <div>\r\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\r\n            <h2 data-testid=\"session-title\">\r\n                {session.label} for {minutesToDuration(session.label === \"Focusing\" ? focusDuration : breakDuration)} minutes \r\n            </h2>\r\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\r\n            <Subtitle session={session} secondsToDuration={secondsToDuration}/>\r\n          </div>\r\n        </div>\r\n        <BarPercentage session={session} focusDuration={focusDuration} breakDuration={breakDuration}/>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default SessionTitle;\r\n","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport {minutesToDuration, secondsToDuration} from \"../utils/duration\"\nimport SessionTitle from \"./sessionTitle\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  function handleDecreasedFocus() {\n    if(focusDuration === 5) return;\n    setFocusDuration(duration => duration -5);\n  }\n\n  function handleIncreasedFocus() {\n    if(focusDuration === 60) return;\n    setFocusDuration(duration => duration +5);\n  }\n\n  function handleDecreasedBreak() {\n    if(breakDuration === 1) return;\n    setBreakDuration(duration => duration -1);\n  }\n\n  function handleIncreasedBreak() {\n    if(breakDuration === 15) return;\n    setBreakDuration(duration => duration +1);\n  }\n\n  const stopSession = () => {\n    setIsTimerRunning(false);\n    setSession(null);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              {/* TODO: Update this text to display the current focus session duration */}\n              Focus Duration: {minutesToDuration(focusDuration)}\n            </span>\n            <div className=\"input-group-append\">\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-focus\"\n                onClick={handleDecreasedFocus}\n                disabled={session}\n              >\n                <span className=\"oi oi-minus\" />\n              </button>\n              {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-focus\"\n                onClick={handleIncreasedFocus}\n                disable={session}\n              >\n                <span className=\"oi oi-plus\" />\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* TODO: Update this text to display the current break session duration */}\n                Break Duration: {minutesToDuration(breakDuration)}\n              </span>\n              <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                  onClick={handleDecreasedBreak}\n                  disable={!session}\n                >\n                  <span className=\"oi oi-minus\" />\n                </button>\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"increase-break\"\n                  onClick={handleIncreasedBreak}\n                  disable={session}\n                >\n                  <span className=\"oi oi-plus\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n              onClick={stopSession}\n              disabled={!session}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <SessionTitle session={session} focusDuration={focusDuration} breakDuration={breakDuration}/>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}